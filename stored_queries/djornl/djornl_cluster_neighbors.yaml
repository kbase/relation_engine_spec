# Fetch the neighbors of all vertices in a certain cluster
name: djornl_cluster_neighbors
params:
  type: object
  required: [cluster_name, cluster_id]
  properties:
    cluster_name:
      type: string
      enum: [cluster_I2, cluster_I4, cluster_I6]
    cluster_id:
      type: string
      examples: [Cluster1, Cluster2]
    distance:
      type: integer
      title: Traversal Distance
      description: How many hops to find neighbors and neighbors-of-neighbors
      default: 1
      minimum: 1
      maximum: 100
# phenotype nodes can be returned
query_prefix: WITH djornl_phenotype
query: |
  LET node_ids = (
    FOR gene IN djornl_gene
      FILTER gene[@cluster_name] == @cluster_id
      FOR node IN 0..@distance ANY gene djornl_edge
        OPTIONS {bfs: true, uniqueVertices: "global"}
        RETURN DISTINCT node._id
  )
  let edges = (
    FOR edge IN djornl_edge
      FILTER edge._from IN node_ids AND edge._to IN node_ids
      RETURN edge
  )
  let nodes = (
    FOR node IN djornl_gene
        FILTER node._id IN node_ids
        return node
  )
  RETURN {nodes, edges}
